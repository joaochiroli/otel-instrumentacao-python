services:
  db:
    image: postgres:latest
    container_name: postgres-db
    ports:
      - "5432:5432"
    environment:
      POSTGRES_DB: simple_app
      POSTGRES_USER: postgres
      POSTGRES_PASSWORD: postgres
      POSTGRES_HOST_AUTH_METHOD: md5
    volumes:
      - postgres_data:/var/lib/postgresql/data
    # command: postgres -c listen_addresses='*' -c 'max_connections=200'
    healthcheck: # verifica se o db esta pronto para os outros servicos
      test: ["CMD-SHELL", "pg_isready -U postgres"]
      interval: 5s
      timeout: 5s
      retries: 10
    networks:
      - app-network
  app:
    image: my-app-python:latest
    container_name: flask-app
    volumes:
      - .:/app
    ports:
      - "5000:5000"
    environment:
      POSTGRES_HOST: db
      POSTGRES_PORT: 5432
      POSTGRES_DB: simple_app
      POSTGRES_USER: postgres
      POSTGRES_PASSWORD: postgres
      FLASK_ENV: development
      FLASK_DEBUG: "true"
      OTEL_SERVICE_NAME: flask-api
      OTEL_EXPORTER_OTLP_ENDPOINT: otel-collector:4317
      OTEL_EXPORTER_OTLP_PROTOCOL: grpc
      OTEL_EXPORTER_OTLP_INSECURE: "true"
      OTEL_TRACES_EXPORTER: console,otlp
      OTEL_METRICS_EXPORTER: console,otlp
      OTEL_LOGS_EXPORTER: console,otlp
      OTEL_PYTHON_LOGGING_AUTO_INSTRUMENTATION_ENABLED: "true"
      OTEL_PYTHON_LOG_CORRELATION: "true"
      OTEL_PYTHON_FLASK_ENABLED: "true"
      OTEL_PYTHON_SQLALCHEMY_ENABLED: "true"
      OTEL_PYTHON_REQUESTS_ENABLED: "true"
      OTEL_TRACES_SAMPLER: always_on
      OTEL_METRICS_SAMPLER: always_on
      # OTEL_LOG_LEVEL: DEBUG
      # OTEL_TRACES_SAMPLER: "always_on"
      # OTEL_TRACES_SAMPLER_ARG: "1.0"
      # OTEL_PYTHON_DISABLED_INSTRUMENTATIONS: ""
      # OTEL_INSTRUMENTATION_HTTP_CAPTURE_HEADERS_SERVER_REQUEST: ".*"
      # OTEL_INSTRUMENTATION_HTTP_CAPTURE_HEADERS_SERVER_RESPONSE: ".*"
    networks:
      - app-network
    depends_on:
      db:
        condition: service_healthy

  # otel-collector:
  #   image: otel/opentelemetry-collector-contrib:latest
  #   container_name: otel-collector
  #   command: ["--config=/etc/otel-collector-config.yaml"]
  #   volumes:
  #     - ./otel-collector-config.yaml:/etc/otel-collector-config.yaml
  #   ports:
  #     - "4317:4317" # OTLP gRPC receiver
  #     - "4318:4318" # OTLP HTTP receiver
  #     - "8888:8888" # Prometheus metrics
  #     - "8889:8889" # Prometheus exporter metrics
  #   networks:
  #     - app-network
  #   restart: unless-stopped

  # jaeger:
  #   image: jaegertracing/all-in-one:latest
  #   container_name: jaeger
  #   environment:
  #     - COLLECTOR_OTLP_ENABLED=true
  #     - LOG_LEVEL=debug
  #   ports:
  #     - "16686:16686" # Jaeger UI
  #     # - "4317:4317" # OTLP gRPC receiver
  #     # - "4318:4318" # OTLP HTTP receiver
  #     - "14250:14250" # Jaeger gRPC
  #     - "14268:14268" # Jaeger HTTP
  #   networks:
  #     - app-network

  # prometheus:
  #   image: prom/prometheus:latest
  #   container_name: prometheus
  #   command:
  #     - "--config.file=/etc/prometheus/prometheus.yml"
  #     - "--storage.tsdb.path=/prometheus"
  #     - "--web.console.libraries=/usr/share/prometheus/console_libraries"
  #     - "--web.console.templates=/usr/share/prometheus/consoles"
  #   volumes:
  #     - ./prometheus.yml:/etc/prometheus/prometheus.yml
  #     - prometheus-data:/prometheus
  #   ports:
  #     - "9090:9090"
  #   networks:
  #     - app-network
  #   depends_on:
  #     - otel-collector
  #   restart: unless-stopped

volumes:
  postgres_data:
  # prometheus-data:

networks:
  app-network:
    driver: bridge
